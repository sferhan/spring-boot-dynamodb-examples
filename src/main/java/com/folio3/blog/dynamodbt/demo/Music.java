/**
 * Copyright Â© 2018 spring-data-dynamodb-example (https://github.com/derjust/spring-data-dynamodb-examples)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.folio3.blog.dynamodbt.demo;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import org.springframework.data.annotation.Id;

@DynamoDBTable(tableName = "Music")
public class Music {

    @Id
	public MusicCompositeKey id;

    @DynamoDBAttribute
	private String genre;

    @DynamoDBAttribute
	private String albumTitle;

    @DynamoDBAttribute
    private List<Review> reviews;

    @DynamoDBAttribute
    @DynamoDBIndexHashKey(attributeName = "year", globalSecondaryIndexName="year-index")
    private Integer year;

    public Music() {
		// Default constructor is required by AWS DynamoDB SDK
	}

    public Music(String artist, String songTitle, String genre, String albumTitle, Integer year, List<Review> reviews) {
        this.genre = genre;
        this.albumTitle = albumTitle;
        this.year = year;
        this.reviews = reviews;
        this.id = new MusicCompositeKey();
        this.id.setArtist(artist);
        this.id.setSongTitle(songTitle);
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getArtist() {
        return this.id==null ? null : this.id.getArtist();
    }

    public void setArtist(String artist) {
        if(this.id == null) {
            this.id = new MusicCompositeKey();
        }
        this.id.setArtist(artist);
    }

    @DynamoDBRangeKey
    public String getSongTitle() {
        return this.id==null ? null : this.id.getSongTitle();
    }

    public void setSongTitle(String songTitle) {
        if(this.id == null) {
            this.id = new MusicCompositeKey();
        }
        this.id.setSongTitle(songTitle);
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public String getAlbumTitle() {
        return albumTitle;
    }

    public void setAlbumTitle(String albumTitle) {
        this.albumTitle = albumTitle;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    public List<Review> getReviews() {
        return reviews;
    }

    public void setReviews(List<Review> reviews) {
        this.reviews = reviews;
    }

    @Override
	public String toString() {
		return "Music [id=" + this.id + ", artist=" + this.id.getArtist() + ", songTitle=" + this.id.getSongTitle() + ", genre"+ this.genre +", albumTitle "+ this.albumTitle +", criticRating"+ this.reviews +"]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.id, this.id.getArtist(), this.id.getSongTitle(), this.genre, this.albumTitle, this.reviews);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Music other = (Music) obj;
		return Arrays.deepEquals(new Object[]{id, this.id.getArtist(), this.id.getSongTitle(), genre, albumTitle, year, reviews},
				new Object[]{other.id, other.id.getArtist(), other.id.getSongTitle(), other.genre, other.albumTitle, other.year, other.reviews});
	}

}
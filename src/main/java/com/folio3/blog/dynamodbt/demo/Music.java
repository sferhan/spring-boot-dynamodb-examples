/**
 * Copyright Â© 2018 spring-data-dynamodb-example (https://github.com/derjust/spring-data-dynamodb-examples)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.folio3.blog.dynamodbt.demo;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.*;
import org.springframework.data.annotation.Id;

import java.util.List;

@DynamoDBTable(tableName = "Music")
@Data
@NoArgsConstructor
public class Music {

    // Spring-Data requires having a dedicated entity representing the key
    @Id
    // To ignore getter and setter for 'id' field : otherwise gives Mapping Exception
    // This is because we don't want id to be a separate column in the table. Rather we want artist and
    // songTitle to be columns in the table and dynamodb to automatically understand that the key of composed
    // if both the attributes
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    // ---------------------
	public MusicCompositeKey id;

    @DynamoDBAttribute
	private String genre;

    @DynamoDBAttribute
	private String albumTitle;

    @DynamoDBAttribute
    private List<Review> reviews;

    @DynamoDBAttribute
    private MiscellaneousInformation otherinfo;

    @DynamoDBAttribute
    // We need an index on year to able to query on its basis
    @DynamoDBIndexHashKey(attributeName = "year", globalSecondaryIndexName="year-index")
    private Integer year;

    public Music(String artist, String songTitle, String genre, String albumTitle, Integer year, List<Review> reviews, MiscellaneousInformation otherinfo) {
        this.genre = genre;
        this.albumTitle = albumTitle;
        this.year = year;
        this.reviews = reviews;
        this.otherinfo = otherinfo;
        this.id = new MusicCompositeKey();
        this.id.setArtist(artist);
        this.id.setSongTitle(songTitle);
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    // This allows creating of artist in the Music table instead of inside the attribute Id
    public String getArtist() {
        return this.id==null ? null : this.id.getArtist();
    }

    public void setArtist(String artist) {
        if(this.id == null) {
            this.id = new MusicCompositeKey();
        }
        this.id.setArtist(artist);
    }

    @DynamoDBRangeKey
    // This allows creating of sontTitle in the Music table instead of inside the attribute Id
    public String getSongTitle() {
        return this.id==null ? null : this.id.getSongTitle();
    }

    public void setSongTitle(String songTitle) {
        if(this.id == null) {
            this.id = new MusicCompositeKey();
        }
        this.id.setSongTitle(songTitle);
    }

    // Create an index on Miscellaneous.quality to be able to query on a sub-document
    @DynamoDBIndexRangeKey(localSecondaryIndexName = "quality-index")
    public String getQuality() {
        if(otherinfo != null) {
            return otherinfo.getQuality();
        }
        return null;
    }

    public void setQuality(String quality) {
        if(otherinfo != null) {
            otherinfo.quality = quality;
            return;
        }
        otherinfo =  new MiscellaneousInformation(quality);
    }
    // ---------------------------------------------------------------------------------

}